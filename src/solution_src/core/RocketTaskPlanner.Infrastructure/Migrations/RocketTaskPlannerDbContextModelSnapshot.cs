// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RocketTaskPlanner.Infrastructure.Database;

#nullable disable

namespace RocketTaskPlanner.Infrastructure.Migrations
{
    [DbContext(typeof(RocketTaskPlannerDbContext))]
    partial class RocketTaskPlannerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RocketTaskPlanner.Domain.ApplicationTimeContext.Entities.TimeZones.ApplicationTimeZone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("time_zone_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time_zone_name");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_id");

                    b.ComplexProperty<Dictionary<string, object>>("TimeInfo", "RocketTaskPlanner.Domain.ApplicationTimeContext.Entities.TimeZones.ApplicationTimeZone.TimeInfo#TimeZoneTimeInfo", b1 =>
                        {
                            b1.Property<DateTime>("DateTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("time_zone_date_time");

                            b1.Property<long>("TimeStamp")
                                .HasColumnType("bigint")
                                .HasColumnName("time_zone_time_stamp");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ProviderId");

                    b.ToTable("time_zones", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.ExternalChatsManagementContext.Entities.ExternalChat", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("external_chats", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.ExternalChatsManagementContext.ExternalChatOwner", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.GeneralChatReceiverSubject", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("general_chat_subject_id");

                    b.Property<long>("GeneralChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("general_chat_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject_message");

                    b.ComplexProperty<Dictionary<string, object>>("Period", "RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.GeneralChatReceiverSubject.Period#ReceiverSubjectPeriodInfo", b1 =>
                        {
                            b1.Property<bool>("IsPeriodic")
                                .HasColumnType("boolean")
                                .HasColumnName("subject_periodic");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeInfo", "RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.GeneralChatReceiverSubject.TimeInfo#ReceiverSubjectTimeInfo", b1 =>
                        {
                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("subject_created");

                            b1.Property<DateTime>("Notify")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("subject_notify");
                        });

                    b.HasKey("Id");

                    b.HasIndex("GeneralChatId")
                        .IsDescending();

                    b.HasIndex("Message")
                        .IsDescending();

                    b.ToTable("general_chat_subjects", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.ThemeChatSubject", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_chat_subject_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject_message");

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_id");

                    b.ComplexProperty<Dictionary<string, object>>("Period", "RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.ThemeChatSubject.Period#ReceiverSubjectPeriodInfo", b1 =>
                        {
                            b1.Property<bool>("IsPeriodic")
                                .HasColumnType("boolean")
                                .HasColumnName("subject_periodic");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeInfo", "RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.ThemeChatSubject.TimeInfo#ReceiverSubjectTimeInfo", b1 =>
                        {
                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("subject_created");

                            b1.Property<DateTime>("Notify")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("subject_notify");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Message")
                        .IsDescending();

                    b.HasIndex("ThemeId")
                        .IsDescending();

                    b.ToTable("theme_chat_subjects", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverThemes.ReceiverTheme", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_id");

                    b.Property<long>("NotificationReceiverId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.HasKey("Id");

                    b.HasIndex("NotificationReceiverId")
                        .IsDescending();

                    b.ToTable("receiver_themes", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_name");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_zone_name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("notification_receivers", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Infrastructure.TimeZoneDb.TimeZoneDbProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("time_zone_db_provider_id");

                    b.HasKey("Id");

                    b.ToTable("time_zone_db_providers", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.ApplicationTimeContext.Entities.TimeZones.ApplicationTimeZone", b =>
                {
                    b.HasOne("RocketTaskPlanner.Infrastructure.TimeZoneDb.TimeZoneDbProvider", "Provider")
                        .WithMany("TimeZones")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.ExternalChatsManagementContext.Entities.ExternalChat", b =>
                {
                    b.HasOne("RocketTaskPlanner.Domain.ExternalChatsManagementContext.ExternalChatOwner", "Owner")
                        .WithMany("Chats")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.GeneralChatReceiverSubject", b =>
                {
                    b.HasOne("RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver", "Receiver")
                        .WithMany("Subjects")
                        .HasForeignKey("GeneralChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.ThemeChatSubject", b =>
                {
                    b.HasOne("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverThemes.ReceiverTheme", "Theme")
                        .WithMany("Subjects")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverThemes.ReceiverTheme", b =>
                {
                    b.HasOne("RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver", "NotificationReceiver")
                        .WithMany("Themes")
                        .HasForeignKey("NotificationReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationReceiver");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.ExternalChatsManagementContext.ExternalChatOwner", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverThemes.ReceiverTheme", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("Themes");
                });

            modelBuilder.Entity("RocketTaskPlanner.Infrastructure.TimeZoneDb.TimeZoneDbProvider", b =>
                {
                    b.Navigation("TimeZones");
                });
#pragma warning restore 612, 618
        }
    }
}
