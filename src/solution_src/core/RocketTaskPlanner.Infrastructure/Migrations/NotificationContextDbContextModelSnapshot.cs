// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RocketTaskPlanner.Infrastructure.Sqlite.NotificationsContext;

#nullable disable

namespace RocketTaskPlanner.Infrastructure.Migrations
{
    [DbContext(typeof(NotificationsDbContext))]
    partial class NotificationContextDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.GeneralChatReceiverSubject", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("general_chat_subject_id");

                    b.Property<long>("GeneralChatId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("general_chat_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("subject_message");

                    b.ComplexProperty<Dictionary<string, object>>("Period", "RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.GeneralChatReceiverSubject.Period#ReceiverSubjectPeriodInfo", b1 =>
                        {
                            b1.Property<bool>("IsPeriodic")
                                .HasColumnType("INTEGER")
                                .HasColumnName("subject_periodic");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeInfo", "RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.GeneralChatReceiverSubject.TimeInfo#ReceiverSubjectTimeInfo", b1 =>
                        {
                            b1.Property<DateTime>("Created")
                                .HasColumnType("TEXT")
                                .HasColumnName("subject_created");

                            b1.Property<DateTime>("Notify")
                                .HasColumnType("TEXT")
                                .HasColumnName("subject_notify");
                        });

                    b.HasKey("Id");

                    b.HasIndex("GeneralChatId")
                        .IsDescending();

                    b.HasIndex("Message")
                        .IsDescending();

                    b.ToTable("general_chat_subjects", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.ThemeChatSubject", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("theme_chat_subject_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("subject_message");

                    b.Property<long>("ThemeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("theme_id");

                    b.ComplexProperty<Dictionary<string, object>>("Period", "RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.ThemeChatSubject.Period#ReceiverSubjectPeriodInfo", b1 =>
                        {
                            b1.Property<bool>("IsPeriodic")
                                .HasColumnType("INTEGER")
                                .HasColumnName("subject_periodic");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeInfo", "RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.ThemeChatSubject.TimeInfo#ReceiverSubjectTimeInfo", b1 =>
                        {
                            b1.Property<DateTime>("Created")
                                .HasColumnType("TEXT")
                                .HasColumnName("subject_created");

                            b1.Property<DateTime>("Notify")
                                .HasColumnType("TEXT")
                                .HasColumnName("subject_notify");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Message")
                        .IsDescending();

                    b.HasIndex("ThemeId")
                        .IsDescending();

                    b.ToTable("theme_chat_subjects", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverThemes.ReceiverTheme", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("theme_id");

                    b.Property<long>("NotificationReceiverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("receiver_id");

                    b.HasKey("Id");

                    b.HasIndex("NotificationReceiverId")
                        .IsDescending();

                    b.ToTable("receiver_themes", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("receiver_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("receiver_name");

                    b.ComplexProperty<Dictionary<string, object>>("TimeZone", "RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver.TimeZone#NotificationReceiverTimeZone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long>("TimeStamp")
                                .HasColumnType("INTEGER")
                                .HasColumnName("receiver_zone_time_stamp");

                            b1.Property<string>("ZoneName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("receiver_zone_name");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("notification_receivers", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.GeneralChatReceiverSubject", b =>
                {
                    b.HasOne("RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver", "Receiver")
                        .WithMany("Subjects")
                        .HasForeignKey("GeneralChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverSubjects.ThemeChatSubject", b =>
                {
                    b.HasOne("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverThemes.ReceiverTheme", "Theme")
                        .WithMany("Subjects")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverThemes.ReceiverTheme", b =>
                {
                    b.HasOne("RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver", "NotificationReceiver")
                        .WithMany("Themes")
                        .HasForeignKey("NotificationReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationReceiver");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.Entities.ReceiverThemes.ReceiverTheme", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.NotificationsContext.NotificationReceiver", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("Themes");
                });
#pragma warning restore 612, 618
        }
    }
}
