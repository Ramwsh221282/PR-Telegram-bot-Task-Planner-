// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RocketTaskPlanner.Infrastructure.Sqlite.ApplicationTimeContext;

#nullable disable

namespace RocketTaskPlanner.Infrastructure.Migrations.ApplicationTimeDb
{
    [DbContext(typeof(ApplicationTimeDbContext))]
    partial class ApplicationTimeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("RocketTaskPlanner.Domain.ApplicationTimeContext.Entities.TimeZones.ApplicationTimeZone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("time_zone_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("time_zone_name");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_id");

                    b.ComplexProperty<Dictionary<string, object>>("TimeInfo", "RocketTaskPlanner.Domain.ApplicationTimeContext.Entities.TimeZones.ApplicationTimeZone.TimeInfo#TimeZoneTimeInfo", b1 =>
                        {
                            b1.Property<DateTime>("DateTime")
                                .HasColumnType("TEXT")
                                .HasColumnName("time_zone_date_time");

                            b1.Property<long>("TimeStamp")
                                .HasColumnType("INTEGER")
                                .HasColumnName("time_zone_time_stamp");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ProviderId");

                    b.ToTable("time_zones", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Infrastructure.TimeZoneDb.TimeZoneDbProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("time_zone_db_provider_id");

                    b.HasKey("Id");

                    b.ToTable("time_zone_db_providers", (string)null);
                });

            modelBuilder.Entity("RocketTaskPlanner.Domain.ApplicationTimeContext.Entities.TimeZones.ApplicationTimeZone", b =>
                {
                    b.HasOne("RocketTaskPlanner.Infrastructure.TimeZoneDb.TimeZoneDbProvider", "Provider")
                        .WithMany("TimeZones")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("RocketTaskPlanner.Infrastructure.TimeZoneDb.TimeZoneDbProvider", b =>
                {
                    b.Navigation("TimeZones");
                });
#pragma warning restore 612, 618
        }
    }
}
